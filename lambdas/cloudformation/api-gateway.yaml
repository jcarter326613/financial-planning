Transform: AWS::Serverless-2016-10-31

Parameters:
  BucketName:
    Type: String
    Description: The name of the S3 bucket
  ZipFileName:
    Type: String
    Description: The name of the zip file which contains the lambda code

Resources:
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: FreeDaysLambdas
      Parameters:
        endpointConfigurationTypes: REGIONAL

  InvocationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaRuntimePermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

  Deployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - LambdaAccountResource1
    Properties:
      RestApiId: !Ref RestApi

  Stage:
    Type: AWS::ApiGateway::Stage
    DependsOn:
      - ApiGatewayAccountSettings
    Properties: 
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogsLogGroup.Arn
        Format: "{ \"requestId\":\"$context.requestId\", \"ip\": \"$context.identity.sourceIp\", \"caller\":\"$context.identity.caller\", \"user\":\"$context.identity.user\",\"requestTime\":\"$context.requestTime\", \"httpMethod\":\"$context.httpMethod\",\"resourcePath\":\"$context.resourcePath\", \"status\":\"$context.status\",\"protocol\":\"$context.protocol\", \"responseLength\":\"$context.responseLength\" }"
      DeploymentId: !Ref Deployment
      RestApiId: !Ref RestApi
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          DataTraceEnabled: true
          LoggingLevel: INFO
          ThrottlingBurstLimit: 4
          ThrottlingRateLimit: 2

  AccessLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/Authorizer"
      RetentionInDays: 7
  
  ApiGatewayAccountSettings:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt AccountLoggingRole.Arn

  AccountLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LoggingPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: '*'

  Dns:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: freedays.life.
      RecordSets:
      -
        Name: api.freedays.life
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt DomainName.RegionalHostedZoneId
          DNSName: !GetAtt DomainName.RegionalDomainName

  Certificate:      
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: api.freedays.life
      DomainValidationOptions:
        - DomainName: api.freedays.life
          HostedZoneId: Z1010109YWO3304ER5BF
      ValidationMethod: DNS

  DomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: api.freedays.life
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref Certificate

  BasePathMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn: 
      - DomainName
    Properties:
      DomainName: api.freedays.life
      ApiId: !Ref RestApi
      Stage: !Ref Stage

  Authorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties: 
      AuthorizerCredentials: !GetAtt InvocationRole.Arn
      AuthorizerUri: 
        Fn::GetAtt: 
        - LambdaAuthorizer
        - Outputs.LambdaUri
      IdentitySource: method.request.header.Authorization
      IdentityValidationExpression: ^(Bearer )[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)$
      Name: JwtBearerToken
      RestApiId: !Ref RestApi
      Type: TOKEN

  LambdaAuthorizer:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        AuthorizerId: ""
        BucketName: !Ref BucketName
        ZipFileName: !Ref ZipFileName
        EntryPoint: account.post_authorize
        RestApiId: ""
        InvocationRoleArn: ""
        RestApiRootResourceId: ""
        Path: ""
        HttpMethod: ""
      TemplateURL: ./lambda.yaml

  ##
  # List of lambdas
  StockHistoryManagementResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: stock-history-management
      RestApiId: !Ref RestApi

  LambdaStockHistoryManagementResource1:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        AuthorizerId: !Ref Authorizer
        BucketName: !Ref BucketName
        ZipFileName: !Ref ZipFileName
        RestApiId: !Ref RestApi
        InvocationRoleArn: !GetAtt InvocationRole.Arn
        RestApiRootResourceId: !Ref StockHistoryManagementResource
        EntryPoint: stockHistoryManagement.patch_addStockToTrack
        Path: add
        HttpMethod: PATCH
      TemplateURL: ./lambda.yaml

  AccountResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: account
      RestApiId: !Ref RestApi

  LambdaAccountResource1:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        AuthorizerId: ""
        BucketName: !Ref BucketName
        ZipFileName: !Ref ZipFileName
        RestApiId: !Ref RestApi
        InvocationRoleArn: !GetAtt InvocationRole.Arn
        RestApiRootResourceId: !Ref AccountResource
        EntryPoint: account.post_create
        Path: create
        HttpMethod: POST
      TemplateURL: ./lambda.yaml

  LambdaAccountResource2:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        AuthorizerId: ""
        BucketName: !Ref BucketName
        ZipFileName: !Ref ZipFileName
        RestApiId: !Ref RestApi
        InvocationRoleArn: !GetAtt InvocationRole.Arn
        RestApiRootResourceId: !Ref AccountResource
        EntryPoint: account.post_login
        Path: login
        HttpMethod: POST
      TemplateURL: ./lambda.yaml
