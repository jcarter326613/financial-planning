Transform: AWS::Serverless-2016-10-31

Parameters:
  AuthorizerId:
    Type: String
    Description: The id for the authorization to use for this lambda or "" for none
  BucketName:
    Type: String
    Description: The name of the S3 bucket
  EntryPoint:
    Type: String
    Description: The entrypoint into the lambda to start execution
  HttpMethod:
    Type: String
    Description: The http method that this lambda will accept
  InvocationRoleArn:
    Type: String
    Description: The ARN of the invocation role
  Path:
    Type: String
    Description: The path to the rest call after the base path
  RestApiId:
    Type: String
    Description: The id of the rest api
  RestApiRootResourceId:
    Type: String
    Description: The root resource id of the rest api to attach the method to.
  ZipFileName:
    Type: String
    Description: The name of the zip file which contains the lambda code

Conditions:
  HasRestApi: !Not
    - !Equals
      - !Ref RestApiId
      - ""
  DoAuthorization: !Not
    - !Equals
      - !Ref AuthorizerId
      - ""

Resources:
  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 
        Bucket: !Ref BucketName
        Key: !Ref ZipFileName
      Runtime: "nodejs14.x"
      Handler: !Join
        - "/"
        - - "out/main/controllers"
          - !Ref EntryPoint
      Role: !GetAtt LambdaRuntimeRole.Arn
      Timeout: 10
      Environment:
        Variables:
          AwsAccountId: AWS::AccountId
          RestApiId: !Ref RestApiId

  LambdaRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaRuntimePermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ssm:GetParameter
                Resource: '*'

  LogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      RetentionInDays: 7

  Method:
    Type: AWS::ApiGateway::Method
    Condition: HasRestApi
    Properties:
      HttpMethod: !Ref HttpMethod
      ResourceId: !Ref Resource
      RestApiId: !Ref RestApiId
      AuthorizationType: !If 
        - DoAuthorization
        - CUSTOM
        - NONE
      AuthorizerId: !If
        - DoAuthorization
        - !Ref AuthorizerId
        - AWS::NoValue
      Integration:
        Credentials: !Ref InvocationRoleArn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Join
          - "/"
          - - "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions"
            - !GetAtt Lambda.Arn
            - "invocations"

  Resource:
    Type: AWS::ApiGateway::Resource
    Condition: HasRestApi
    Properties: 
      ParentId: !Ref RestApiRootResourceId
      PathPart: !Ref Path
      RestApiId: !Ref RestApiId

Outputs:
  LambdaArn:
    Description: The lambda of the ARN created by this stack
    Value: !GetAtt Lambda.Arn
  LambdaUri:
    Description: The URI of the lambda function
    Value: !Join
      - "/"
      - - "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions"
        - !GetAtt Lambda.Arn
        - "invocations"